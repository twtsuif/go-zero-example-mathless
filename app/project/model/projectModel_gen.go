// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	projectFieldNames          = builder.RawFieldNames(&Project{})
	projectRows                = strings.Join(projectFieldNames, ",")
	projectRowsExpectAutoSet   = strings.Join(stringx.Remove(projectFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	projectRowsWithPlaceHolder = strings.Join(stringx.Remove(projectFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMathlessProjectIdPrefix = "cache:mathless:project:id:"
)

type (
	projectModel interface {
		Insert(ctx context.Context, data *Project) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Project, error)
		Update(ctx context.Context, data *Project) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProjectModel struct {
		sqlc.CachedConn
		table string
	}

	Project struct {
		Id           int64  `db:"id"`
		Uid          int64  `db:"uid"`
		Name         string `db:"name"`
		FilePathJson string `db:"file_path_json"`
	}
)

func newProjectModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultProjectModel {
	return &defaultProjectModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`project`",
	}
}

func (m *defaultProjectModel) Delete(ctx context.Context, id int64) error {
	mathlessProjectIdKey := fmt.Sprintf("%s%v", cacheMathlessProjectIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mathlessProjectIdKey)
	return err
}

func (m *defaultProjectModel) FindOne(ctx context.Context, id int64) (*Project, error) {
	mathlessProjectIdKey := fmt.Sprintf("%s%v", cacheMathlessProjectIdPrefix, id)
	var resp Project
	err := m.QueryRowCtx(ctx, &resp, mathlessProjectIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", projectRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProjectModel) Insert(ctx context.Context, data *Project) (sql.Result, error) {
	mathlessProjectIdKey := fmt.Sprintf("%s%v", cacheMathlessProjectIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, projectRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Name, data.FilePathJson)
	}, mathlessProjectIdKey)
	return ret, err
}

func (m *defaultProjectModel) Update(ctx context.Context, data *Project) error {
	mathlessProjectIdKey := fmt.Sprintf("%s%v", cacheMathlessProjectIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, projectRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uid, data.Name, data.FilePathJson, data.Id)
	}, mathlessProjectIdKey)
	return err
}

func (m *defaultProjectModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMathlessProjectIdPrefix, primary)
}

func (m *defaultProjectModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", projectRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProjectModel) tableName() string {
	return m.table
}
