// Code generated by goctl. DO NOT EDIT.
// Source: project.proto

package projectservice

import (
	"context"

	"mathless-backend/app/project/cmd/rpc/project"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateProjectRequest  = project.CreateProjectRequest
	CreateProjectResponse = project.CreateProjectResponse
	DeleteProjectRequest  = project.DeleteProjectRequest
	DeleteProjectResponse = project.DeleteProjectResponse
	GetProjectsRequest    = project.GetProjectsRequest
	GetProjectsResponse   = project.GetProjectsResponse
	Project               = project.Project
	UpdateProjectRequest  = project.UpdateProjectRequest
	UpdateProjectResponse = project.UpdateProjectResponse

	ProjectService interface {
		// 获取用户的工程
		GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error)
		// 创建工程
		CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
		// 删除工程
		DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
		// 更新工程
		UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	}

	defaultProjectService struct {
		cli zrpc.Client
	}
)

func NewProjectService(cli zrpc.Client) ProjectService {
	return &defaultProjectService{
		cli: cli,
	}
}

// 获取用户的工程
func (m *defaultProjectService) GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error) {
	client := project.NewProjectServiceClient(m.cli.Conn())
	return client.GetProjects(ctx, in, opts...)
}

// 创建工程
func (m *defaultProjectService) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	client := project.NewProjectServiceClient(m.cli.Conn())
	return client.CreateProject(ctx, in, opts...)
}

// 删除工程
func (m *defaultProjectService) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	client := project.NewProjectServiceClient(m.cli.Conn())
	return client.DeleteProject(ctx, in, opts...)
}

// 更新工程
func (m *defaultProjectService) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	client := project.NewProjectServiceClient(m.cli.Conn())
	return client.UpdateProject(ctx, in, opts...)
}
