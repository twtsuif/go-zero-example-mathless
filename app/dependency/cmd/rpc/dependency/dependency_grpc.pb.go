// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: dependency.proto

package dependency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DependencyServiceClient is the client API for DependencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DependencyServiceClient interface {
	// 获取依赖内容
	GetDependency(ctx context.Context, in *GetDependencyRequest, opts ...grpc.CallOption) (*GetDependencyResponse, error)
	// 下载依赖
	DownloadDependency(ctx context.Context, in *DownloadDependencyRequest, opts ...grpc.CallOption) (*DownloadDependencyResponse, error)
	// 搜索依赖
	SearchDependencies(ctx context.Context, in *SearchDependenciesRequest, opts ...grpc.CallOption) (*SearchDependenciesResponse, error)
}

type dependencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDependencyServiceClient(cc grpc.ClientConnInterface) DependencyServiceClient {
	return &dependencyServiceClient{cc}
}

func (c *dependencyServiceClient) GetDependency(ctx context.Context, in *GetDependencyRequest, opts ...grpc.CallOption) (*GetDependencyResponse, error) {
	out := new(GetDependencyResponse)
	err := c.cc.Invoke(ctx, "/dependency.DependencyService/GetDependency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyServiceClient) DownloadDependency(ctx context.Context, in *DownloadDependencyRequest, opts ...grpc.CallOption) (*DownloadDependencyResponse, error) {
	out := new(DownloadDependencyResponse)
	err := c.cc.Invoke(ctx, "/dependency.DependencyService/DownloadDependency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyServiceClient) SearchDependencies(ctx context.Context, in *SearchDependenciesRequest, opts ...grpc.CallOption) (*SearchDependenciesResponse, error) {
	out := new(SearchDependenciesResponse)
	err := c.cc.Invoke(ctx, "/dependency.DependencyService/SearchDependencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DependencyServiceServer is the server API for DependencyService service.
// All implementations must embed UnimplementedDependencyServiceServer
// for forward compatibility
type DependencyServiceServer interface {
	// 获取依赖内容
	GetDependency(context.Context, *GetDependencyRequest) (*GetDependencyResponse, error)
	// 下载依赖
	DownloadDependency(context.Context, *DownloadDependencyRequest) (*DownloadDependencyResponse, error)
	// 搜索依赖
	SearchDependencies(context.Context, *SearchDependenciesRequest) (*SearchDependenciesResponse, error)
	mustEmbedUnimplementedDependencyServiceServer()
}

// UnimplementedDependencyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDependencyServiceServer struct {
}

func (UnimplementedDependencyServiceServer) GetDependency(context.Context, *GetDependencyRequest) (*GetDependencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDependency not implemented")
}
func (UnimplementedDependencyServiceServer) DownloadDependency(context.Context, *DownloadDependencyRequest) (*DownloadDependencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDependency not implemented")
}
func (UnimplementedDependencyServiceServer) SearchDependencies(context.Context, *SearchDependenciesRequest) (*SearchDependenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDependencies not implemented")
}
func (UnimplementedDependencyServiceServer) mustEmbedUnimplementedDependencyServiceServer() {}

// UnsafeDependencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DependencyServiceServer will
// result in compilation errors.
type UnsafeDependencyServiceServer interface {
	mustEmbedUnimplementedDependencyServiceServer()
}

func RegisterDependencyServiceServer(s grpc.ServiceRegistrar, srv DependencyServiceServer) {
	s.RegisterService(&DependencyService_ServiceDesc, srv)
}

func _DependencyService_GetDependency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDependencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyServiceServer).GetDependency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dependency.DependencyService/GetDependency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyServiceServer).GetDependency(ctx, req.(*GetDependencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyService_DownloadDependency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDependencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyServiceServer).DownloadDependency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dependency.DependencyService/DownloadDependency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyServiceServer).DownloadDependency(ctx, req.(*DownloadDependencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyService_SearchDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDependenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyServiceServer).SearchDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dependency.DependencyService/SearchDependencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyServiceServer).SearchDependencies(ctx, req.(*SearchDependenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DependencyService_ServiceDesc is the grpc.ServiceDesc for DependencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DependencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dependency.DependencyService",
	HandlerType: (*DependencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDependency",
			Handler:    _DependencyService_GetDependency_Handler,
		},
		{
			MethodName: "DownloadDependency",
			Handler:    _DependencyService_DownloadDependency_Handler,
		},
		{
			MethodName: "SearchDependencies",
			Handler:    _DependencyService_SearchDependencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dependency.proto",
}
