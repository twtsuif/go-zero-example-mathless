// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userservice

import (
	"context"
	user2 "mathless-backend/app/user/cmd/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginUserRequest     = user2.LoginUserRequest
	LoginUserResponse    = user2.LoginUserResponse
	RegisterUserRequest  = user2.RegisterUserRequest
	RegisterUserResponse = user2.RegisterUserResponse
	VerifyEmailRequest   = user2.VerifyEmailRequest
	VerifyEmailResponse  = user2.VerifyEmailResponse

	UserService interface {
		// 注册
		RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
		// 登录
		LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
		// 发送邮箱验证码
		VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

// 注册
func (m *defaultUserService) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	client := user2.NewUserServiceClient(m.cli.Conn())
	return client.RegisterUser(ctx, in, opts...)
}

// 登录
func (m *defaultUserService) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	client := user2.NewUserServiceClient(m.cli.Conn())
	return client.LoginUser(ctx, in, opts...)
}

// 发送邮箱验证码
func (m *defaultUserService) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	client := user2.NewUserServiceClient(m.cli.Conn())
	return client.VerifyEmail(ctx, in, opts...)
}
