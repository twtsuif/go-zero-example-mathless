// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	functionsFieldNames          = builder.RawFieldNames(&Functions{})
	functionsRows                = strings.Join(functionsFieldNames, ",")
	functionsRowsExpectAutoSet   = strings.Join(stringx.Remove(functionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	functionsRowsWithPlaceHolder = strings.Join(stringx.Remove(functionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMathlessFunctionsIdPrefix = "cache:mathless:functions:id:"
)

type (
	functionsModel interface {
		Insert(ctx context.Context, data *Functions) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Functions, error)
		Update(ctx context.Context, data *Functions) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFunctionsModel struct {
		sqlc.CachedConn
		table string
	}

	Functions struct {
		Id           int64  `db:"id"`             // 主键
		LibraryId    int64  `db:"library_id"`     // 函数库id
		Name         string `db:"name"`           // 函数名
		FilePathJson string `db:"file_path_json"` // 文件路径json
		OssBucket    string `db:"oss_bucket"`     // oss桶名称
		OssPath      string `db:"oss_path"`       // oss路径
	}
)

func newFunctionsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFunctionsModel {
	return &defaultFunctionsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`functions`",
	}
}

func (m *defaultFunctionsModel) Delete(ctx context.Context, id int64) error {
	mathlessFunctionsIdKey := fmt.Sprintf("%s%v", cacheMathlessFunctionsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mathlessFunctionsIdKey)
	return err
}

func (m *defaultFunctionsModel) FindOne(ctx context.Context, id int64) (*Functions, error) {
	mathlessFunctionsIdKey := fmt.Sprintf("%s%v", cacheMathlessFunctionsIdPrefix, id)
	var resp Functions
	err := m.QueryRowCtx(ctx, &resp, mathlessFunctionsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", functionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFunctionsModel) Insert(ctx context.Context, data *Functions) (sql.Result, error) {
	mathlessFunctionsIdKey := fmt.Sprintf("%s%v", cacheMathlessFunctionsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, functionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.LibraryId, data.Name, data.FilePathJson, data.OssBucket, data.OssPath)
	}, mathlessFunctionsIdKey)
	return ret, err
}

func (m *defaultFunctionsModel) Update(ctx context.Context, data *Functions) error {
	mathlessFunctionsIdKey := fmt.Sprintf("%s%v", cacheMathlessFunctionsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, functionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.LibraryId, data.Name, data.FilePathJson, data.OssBucket, data.OssPath, data.Id)
	}, mathlessFunctionsIdKey)
	return err
}

func (m *defaultFunctionsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMathlessFunctionsIdPrefix, primary)
}

func (m *defaultFunctionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", functionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFunctionsModel) tableName() string {
	return m.table
}
