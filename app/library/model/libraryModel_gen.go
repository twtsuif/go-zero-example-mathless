// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	libraryFieldNames          = builder.RawFieldNames(&Library{})
	libraryRows                = strings.Join(libraryFieldNames, ",")
	libraryRowsExpectAutoSet   = strings.Join(stringx.Remove(libraryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	libraryRowsWithPlaceHolder = strings.Join(stringx.Remove(libraryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMathlessLibraryIdPrefix = "cache:mathless:library:id:"
)

type (
	libraryModel interface {
		Insert(ctx context.Context, data *Library) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Library, error)
		Update(ctx context.Context, data *Library) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLibraryModel struct {
		sqlc.CachedConn
		table string
	}

	Library struct {
		Id          int64          `db:"id"`          // 主键
		Uid         int64          `db:"uid"`         // 所属用户id
		Name        string         `db:"name"`        // 函数库名
		Description sql.NullString `db:"description"` // 函数库描述
		Status      int64          `db:"status"`      // 初始为0 申请中为1 审核通过为2 拒绝为3
	}
)

func newLibraryModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultLibraryModel {
	return &defaultLibraryModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`library`",
	}
}

func (m *defaultLibraryModel) Delete(ctx context.Context, id int64) error {
	mathlessLibraryIdKey := fmt.Sprintf("%s%v", cacheMathlessLibraryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mathlessLibraryIdKey)
	return err
}

func (m *defaultLibraryModel) FindOne(ctx context.Context, id int64) (*Library, error) {
	mathlessLibraryIdKey := fmt.Sprintf("%s%v", cacheMathlessLibraryIdPrefix, id)
	var resp Library
	err := m.QueryRowCtx(ctx, &resp, mathlessLibraryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", libraryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLibraryModel) Insert(ctx context.Context, data *Library) (sql.Result, error) {
	mathlessLibraryIdKey := fmt.Sprintf("%s%v", cacheMathlessLibraryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, libraryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Name, data.Description, data.Status)
	}, mathlessLibraryIdKey)
	return ret, err
}

func (m *defaultLibraryModel) Update(ctx context.Context, data *Library) error {
	mathlessLibraryIdKey := fmt.Sprintf("%s%v", cacheMathlessLibraryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, libraryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uid, data.Name, data.Description, data.Status, data.Id)
	}, mathlessLibraryIdKey)
	return err
}

func (m *defaultLibraryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMathlessLibraryIdPrefix, primary)
}

func (m *defaultLibraryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", libraryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLibraryModel) tableName() string {
	return m.table
}
