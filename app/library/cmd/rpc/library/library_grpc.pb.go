// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package library

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LibraryServiceClient is the client API for LibraryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibraryServiceClient interface {
	CreateLibrary(ctx context.Context, in *CreateLibraryRequest, opts ...grpc.CallOption) (*CreateLibraryResponse, error)
	GetLibraries(ctx context.Context, in *GetLibrariesRequest, opts ...grpc.CallOption) (*GetLibrariesResponse, error)
	DeleteLibrary(ctx context.Context, in *DeleteLibraryRequest, opts ...grpc.CallOption) (*DeleteLibraryResponse, error)
	UpdateLibrary(ctx context.Context, in *UpdateLibraryRequest, opts ...grpc.CallOption) (*UpdateLibraryResponse, error)
	PublishLibraryApply(ctx context.Context, in *PublishLibraryApplyRequest, opts ...grpc.CallOption) (*PublishLibraryApplyResponse, error)
	PublishLibraryGranted(ctx context.Context, in *PublishLibraryGrantedRequest, opts ...grpc.CallOption) (*PublishLibraryGrantedResponse, error)
	PublishLibraryDenied(ctx context.Context, in *PublishLibraryDeniedRequest, opts ...grpc.CallOption) (*PublishLibraryDeniedResponse, error)
	CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*CreateFunctionResponse, error)
	GetFunctions(ctx context.Context, in *GetFunctionsRequest, opts ...grpc.CallOption) (*GetFunctionsResponse, error)
	DeleteFunction(ctx context.Context, in *DeleteFunctionRequest, opts ...grpc.CallOption) (*DeleteFunctionResponse, error)
	UpdateFunction(ctx context.Context, in *UpdateFunctionRequest, opts ...grpc.CallOption) (*UpdateFunctionResponse, error)
}

type libraryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibraryServiceClient(cc grpc.ClientConnInterface) LibraryServiceClient {
	return &libraryServiceClient{cc}
}

func (c *libraryServiceClient) CreateLibrary(ctx context.Context, in *CreateLibraryRequest, opts ...grpc.CallOption) (*CreateLibraryResponse, error) {
	out := new(CreateLibraryResponse)
	err := c.cc.Invoke(ctx, "/library.LibraryService/CreateLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetLibraries(ctx context.Context, in *GetLibrariesRequest, opts ...grpc.CallOption) (*GetLibrariesResponse, error) {
	out := new(GetLibrariesResponse)
	err := c.cc.Invoke(ctx, "/library.LibraryService/GetLibraries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) DeleteLibrary(ctx context.Context, in *DeleteLibraryRequest, opts ...grpc.CallOption) (*DeleteLibraryResponse, error) {
	out := new(DeleteLibraryResponse)
	err := c.cc.Invoke(ctx, "/library.LibraryService/DeleteLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) UpdateLibrary(ctx context.Context, in *UpdateLibraryRequest, opts ...grpc.CallOption) (*UpdateLibraryResponse, error) {
	out := new(UpdateLibraryResponse)
	err := c.cc.Invoke(ctx, "/library.LibraryService/UpdateLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) PublishLibraryApply(ctx context.Context, in *PublishLibraryApplyRequest, opts ...grpc.CallOption) (*PublishLibraryApplyResponse, error) {
	out := new(PublishLibraryApplyResponse)
	err := c.cc.Invoke(ctx, "/library.LibraryService/PublishLibraryApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) PublishLibraryGranted(ctx context.Context, in *PublishLibraryGrantedRequest, opts ...grpc.CallOption) (*PublishLibraryGrantedResponse, error) {
	out := new(PublishLibraryGrantedResponse)
	err := c.cc.Invoke(ctx, "/library.LibraryService/PublishLibraryGranted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) PublishLibraryDenied(ctx context.Context, in *PublishLibraryDeniedRequest, opts ...grpc.CallOption) (*PublishLibraryDeniedResponse, error) {
	out := new(PublishLibraryDeniedResponse)
	err := c.cc.Invoke(ctx, "/library.LibraryService/PublishLibraryDenied", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*CreateFunctionResponse, error) {
	out := new(CreateFunctionResponse)
	err := c.cc.Invoke(ctx, "/library.LibraryService/CreateFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetFunctions(ctx context.Context, in *GetFunctionsRequest, opts ...grpc.CallOption) (*GetFunctionsResponse, error) {
	out := new(GetFunctionsResponse)
	err := c.cc.Invoke(ctx, "/library.LibraryService/GetFunctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) DeleteFunction(ctx context.Context, in *DeleteFunctionRequest, opts ...grpc.CallOption) (*DeleteFunctionResponse, error) {
	out := new(DeleteFunctionResponse)
	err := c.cc.Invoke(ctx, "/library.LibraryService/DeleteFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) UpdateFunction(ctx context.Context, in *UpdateFunctionRequest, opts ...grpc.CallOption) (*UpdateFunctionResponse, error) {
	out := new(UpdateFunctionResponse)
	err := c.cc.Invoke(ctx, "/library.LibraryService/UpdateFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibraryServiceServer is the server API for LibraryService service.
// All implementations must embed UnimplementedLibraryServiceServer
// for forward compatibility
type LibraryServiceServer interface {
	CreateLibrary(context.Context, *CreateLibraryRequest) (*CreateLibraryResponse, error)
	GetLibraries(context.Context, *GetLibrariesRequest) (*GetLibrariesResponse, error)
	DeleteLibrary(context.Context, *DeleteLibraryRequest) (*DeleteLibraryResponse, error)
	UpdateLibrary(context.Context, *UpdateLibraryRequest) (*UpdateLibraryResponse, error)
	PublishLibraryApply(context.Context, *PublishLibraryApplyRequest) (*PublishLibraryApplyResponse, error)
	PublishLibraryGranted(context.Context, *PublishLibraryGrantedRequest) (*PublishLibraryGrantedResponse, error)
	PublishLibraryDenied(context.Context, *PublishLibraryDeniedRequest) (*PublishLibraryDeniedResponse, error)
	CreateFunction(context.Context, *CreateFunctionRequest) (*CreateFunctionResponse, error)
	GetFunctions(context.Context, *GetFunctionsRequest) (*GetFunctionsResponse, error)
	DeleteFunction(context.Context, *DeleteFunctionRequest) (*DeleteFunctionResponse, error)
	UpdateFunction(context.Context, *UpdateFunctionRequest) (*UpdateFunctionResponse, error)
	mustEmbedUnimplementedLibraryServiceServer()
}

// UnimplementedLibraryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLibraryServiceServer struct {
}

func (UnimplementedLibraryServiceServer) CreateLibrary(context.Context, *CreateLibraryRequest) (*CreateLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLibrary not implemented")
}
func (UnimplementedLibraryServiceServer) GetLibraries(context.Context, *GetLibrariesRequest) (*GetLibrariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLibraries not implemented")
}
func (UnimplementedLibraryServiceServer) DeleteLibrary(context.Context, *DeleteLibraryRequest) (*DeleteLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLibrary not implemented")
}
func (UnimplementedLibraryServiceServer) UpdateLibrary(context.Context, *UpdateLibraryRequest) (*UpdateLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLibrary not implemented")
}
func (UnimplementedLibraryServiceServer) PublishLibraryApply(context.Context, *PublishLibraryApplyRequest) (*PublishLibraryApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishLibraryApply not implemented")
}
func (UnimplementedLibraryServiceServer) PublishLibraryGranted(context.Context, *PublishLibraryGrantedRequest) (*PublishLibraryGrantedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishLibraryGranted not implemented")
}
func (UnimplementedLibraryServiceServer) PublishLibraryDenied(context.Context, *PublishLibraryDeniedRequest) (*PublishLibraryDeniedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishLibraryDenied not implemented")
}
func (UnimplementedLibraryServiceServer) CreateFunction(context.Context, *CreateFunctionRequest) (*CreateFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFunction not implemented")
}
func (UnimplementedLibraryServiceServer) GetFunctions(context.Context, *GetFunctionsRequest) (*GetFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctions not implemented")
}
func (UnimplementedLibraryServiceServer) DeleteFunction(context.Context, *DeleteFunctionRequest) (*DeleteFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFunction not implemented")
}
func (UnimplementedLibraryServiceServer) UpdateFunction(context.Context, *UpdateFunctionRequest) (*UpdateFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFunction not implemented")
}
func (UnimplementedLibraryServiceServer) mustEmbedUnimplementedLibraryServiceServer() {}

// UnsafeLibraryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibraryServiceServer will
// result in compilation errors.
type UnsafeLibraryServiceServer interface {
	mustEmbedUnimplementedLibraryServiceServer()
}

func RegisterLibraryServiceServer(s grpc.ServiceRegistrar, srv LibraryServiceServer) {
	s.RegisterService(&LibraryService_ServiceDesc, srv)
}

func _LibraryService_CreateLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).CreateLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/CreateLibrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).CreateLibrary(ctx, req.(*CreateLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetLibraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLibrariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetLibraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/GetLibraries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetLibraries(ctx, req.(*GetLibrariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_DeleteLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).DeleteLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/DeleteLibrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).DeleteLibrary(ctx, req.(*DeleteLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_UpdateLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).UpdateLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/UpdateLibrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).UpdateLibrary(ctx, req.(*UpdateLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_PublishLibraryApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishLibraryApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).PublishLibraryApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/PublishLibraryApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).PublishLibraryApply(ctx, req.(*PublishLibraryApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_PublishLibraryGranted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishLibraryGrantedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).PublishLibraryGranted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/PublishLibraryGranted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).PublishLibraryGranted(ctx, req.(*PublishLibraryGrantedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_PublishLibraryDenied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishLibraryDeniedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).PublishLibraryDenied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/PublishLibraryDenied",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).PublishLibraryDenied(ctx, req.(*PublishLibraryDeniedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_CreateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).CreateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/CreateFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).CreateFunction(ctx, req.(*CreateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/GetFunctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetFunctions(ctx, req.(*GetFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_DeleteFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).DeleteFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/DeleteFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).DeleteFunction(ctx, req.(*DeleteFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_UpdateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).UpdateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/library.LibraryService/UpdateFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).UpdateFunction(ctx, req.(*UpdateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibraryService_ServiceDesc is the grpc.ServiceDesc for LibraryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibraryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library.LibraryService",
	HandlerType: (*LibraryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLibrary",
			Handler:    _LibraryService_CreateLibrary_Handler,
		},
		{
			MethodName: "GetLibraries",
			Handler:    _LibraryService_GetLibraries_Handler,
		},
		{
			MethodName: "DeleteLibrary",
			Handler:    _LibraryService_DeleteLibrary_Handler,
		},
		{
			MethodName: "UpdateLibrary",
			Handler:    _LibraryService_UpdateLibrary_Handler,
		},
		{
			MethodName: "PublishLibraryApply",
			Handler:    _LibraryService_PublishLibraryApply_Handler,
		},
		{
			MethodName: "PublishLibraryGranted",
			Handler:    _LibraryService_PublishLibraryGranted_Handler,
		},
		{
			MethodName: "PublishLibraryDenied",
			Handler:    _LibraryService_PublishLibraryDenied_Handler,
		},
		{
			MethodName: "CreateFunction",
			Handler:    _LibraryService_CreateFunction_Handler,
		},
		{
			MethodName: "GetFunctions",
			Handler:    _LibraryService_GetFunctions_Handler,
		},
		{
			MethodName: "DeleteFunction",
			Handler:    _LibraryService_DeleteFunction_Handler,
		},
		{
			MethodName: "UpdateFunction",
			Handler:    _LibraryService_UpdateFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library.proto",
}
