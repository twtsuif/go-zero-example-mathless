// Code generated by goctl. DO NOT EDIT.
// Source: library.proto

package libraryservice

import (
	"context"

	"mathless-backend/app/library/cmd/rpc/library"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateFunctionRequest         = library.CreateFunctionRequest
	CreateFunctionResponse        = library.CreateFunctionResponse
	CreateLibraryRequest          = library.CreateLibraryRequest
	CreateLibraryResponse         = library.CreateLibraryResponse
	DeleteFunctionRequest         = library.DeleteFunctionRequest
	DeleteFunctionResponse        = library.DeleteFunctionResponse
	DeleteLibraryRequest          = library.DeleteLibraryRequest
	DeleteLibraryResponse         = library.DeleteLibraryResponse
	Function                      = library.Function
	GetFunctionsRequest           = library.GetFunctionsRequest
	GetFunctionsResponse          = library.GetFunctionsResponse
	GetLibrariesRequest           = library.GetLibrariesRequest
	GetLibrariesResponse          = library.GetLibrariesResponse
	Library                       = library.Library
	PublishLibraryApplyRequest    = library.PublishLibraryApplyRequest
	PublishLibraryApplyResponse   = library.PublishLibraryApplyResponse
	PublishLibraryDeniedRequest   = library.PublishLibraryDeniedRequest
	PublishLibraryDeniedResponse  = library.PublishLibraryDeniedResponse
	PublishLibraryGrantedRequest  = library.PublishLibraryGrantedRequest
	PublishLibraryGrantedResponse = library.PublishLibraryGrantedResponse
	UpdateFunctionRequest         = library.UpdateFunctionRequest
	UpdateFunctionResponse        = library.UpdateFunctionResponse
	UpdateLibraryRequest          = library.UpdateLibraryRequest
	UpdateLibraryResponse         = library.UpdateLibraryResponse

	LibraryService interface {
		CreateLibrary(ctx context.Context, in *CreateLibraryRequest, opts ...grpc.CallOption) (*CreateLibraryResponse, error)
		GetLibraries(ctx context.Context, in *GetLibrariesRequest, opts ...grpc.CallOption) (*GetLibrariesResponse, error)
		DeleteLibrary(ctx context.Context, in *DeleteLibraryRequest, opts ...grpc.CallOption) (*DeleteLibraryResponse, error)
		UpdateLibrary(ctx context.Context, in *UpdateLibraryRequest, opts ...grpc.CallOption) (*UpdateLibraryResponse, error)
		PublishLibraryApply(ctx context.Context, in *PublishLibraryApplyRequest, opts ...grpc.CallOption) (*PublishLibraryApplyResponse, error)
		PublishLibraryGranted(ctx context.Context, in *PublishLibraryGrantedRequest, opts ...grpc.CallOption) (*PublishLibraryGrantedResponse, error)
		PublishLibraryDenied(ctx context.Context, in *PublishLibraryDeniedRequest, opts ...grpc.CallOption) (*PublishLibraryDeniedResponse, error)
		CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*CreateFunctionResponse, error)
		GetFunctions(ctx context.Context, in *GetFunctionsRequest, opts ...grpc.CallOption) (*GetFunctionsResponse, error)
		DeleteFunction(ctx context.Context, in *DeleteFunctionRequest, opts ...grpc.CallOption) (*DeleteFunctionResponse, error)
		UpdateFunction(ctx context.Context, in *UpdateFunctionRequest, opts ...grpc.CallOption) (*UpdateFunctionResponse, error)
	}

	defaultLibraryService struct {
		cli zrpc.Client
	}
)

func NewLibraryService(cli zrpc.Client) LibraryService {
	return &defaultLibraryService{
		cli: cli,
	}
}

func (m *defaultLibraryService) CreateLibrary(ctx context.Context, in *CreateLibraryRequest, opts ...grpc.CallOption) (*CreateLibraryResponse, error) {
	client := library.NewLibraryServiceClient(m.cli.Conn())
	return client.CreateLibrary(ctx, in, opts...)
}

func (m *defaultLibraryService) GetLibraries(ctx context.Context, in *GetLibrariesRequest, opts ...grpc.CallOption) (*GetLibrariesResponse, error) {
	client := library.NewLibraryServiceClient(m.cli.Conn())
	return client.GetLibraries(ctx, in, opts...)
}

func (m *defaultLibraryService) DeleteLibrary(ctx context.Context, in *DeleteLibraryRequest, opts ...grpc.CallOption) (*DeleteLibraryResponse, error) {
	client := library.NewLibraryServiceClient(m.cli.Conn())
	return client.DeleteLibrary(ctx, in, opts...)
}

func (m *defaultLibraryService) UpdateLibrary(ctx context.Context, in *UpdateLibraryRequest, opts ...grpc.CallOption) (*UpdateLibraryResponse, error) {
	client := library.NewLibraryServiceClient(m.cli.Conn())
	return client.UpdateLibrary(ctx, in, opts...)
}

func (m *defaultLibraryService) PublishLibraryApply(ctx context.Context, in *PublishLibraryApplyRequest, opts ...grpc.CallOption) (*PublishLibraryApplyResponse, error) {
	client := library.NewLibraryServiceClient(m.cli.Conn())
	return client.PublishLibraryApply(ctx, in, opts...)
}

func (m *defaultLibraryService) PublishLibraryGranted(ctx context.Context, in *PublishLibraryGrantedRequest, opts ...grpc.CallOption) (*PublishLibraryGrantedResponse, error) {
	client := library.NewLibraryServiceClient(m.cli.Conn())
	return client.PublishLibraryGranted(ctx, in, opts...)
}

func (m *defaultLibraryService) PublishLibraryDenied(ctx context.Context, in *PublishLibraryDeniedRequest, opts ...grpc.CallOption) (*PublishLibraryDeniedResponse, error) {
	client := library.NewLibraryServiceClient(m.cli.Conn())
	return client.PublishLibraryDenied(ctx, in, opts...)
}

func (m *defaultLibraryService) CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*CreateFunctionResponse, error) {
	client := library.NewLibraryServiceClient(m.cli.Conn())
	return client.CreateFunction(ctx, in, opts...)
}

func (m *defaultLibraryService) GetFunctions(ctx context.Context, in *GetFunctionsRequest, opts ...grpc.CallOption) (*GetFunctionsResponse, error) {
	client := library.NewLibraryServiceClient(m.cli.Conn())
	return client.GetFunctions(ctx, in, opts...)
}

func (m *defaultLibraryService) DeleteFunction(ctx context.Context, in *DeleteFunctionRequest, opts ...grpc.CallOption) (*DeleteFunctionResponse, error) {
	client := library.NewLibraryServiceClient(m.cli.Conn())
	return client.DeleteFunction(ctx, in, opts...)
}

func (m *defaultLibraryService) UpdateFunction(ctx context.Context, in *UpdateFunctionRequest, opts ...grpc.CallOption) (*UpdateFunctionResponse, error) {
	client := library.NewLibraryServiceClient(m.cli.Conn())
	return client.UpdateFunction(ctx, in, opts...)
}
